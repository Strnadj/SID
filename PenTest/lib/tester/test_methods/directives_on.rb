# Test cases for on directives, extends TestInterface
#
# @author Jan Strnadek, <jan.strnadek@gmail.com>

require_relative './interfaces/test_interface'
require_relative './helpers/test_helper'

class DirectivesOn < TestInterface
  # Test links
  def test_links
    @parser_results[:links].each {
        |link|
        attr = link.attr
        puts "\tTest: ".yellow.bold << link.url << "\n" if @options[:debug]

        # Iterate parameters
        for i in 0..(attr.count - 1)
          # Get original request
          original = TestHelper.get_request(link.get_uri())

          # Test 404 error
          if original[:code] == 404
            puts "\t\tError: ".red.bold << "404 - not found" << "\n" if @options[:debug]
            next
          end

          # Add ' to try to break
          attr_c = Marshal.load(Marshal.dump(attr))
          attr_c[i][1] += "'"

          # Test res
          test_res = TestHelper.get_request(TestHelper.create_url(link.url, attr_c))

          # Test to 404 error?
          if test_res[:code] == 404
            puts "\t\tError: ".red.bold << "404 - not found" << "\n" if @options[:debug]
            next
          end

          # Test result error
          if compare_results_error(original[:body], test_res[:body])
            puts "\t\tParam: ".red.bold << attr_c[i][0] << " - probably " << "UNSECURED".bold.red << "\n"  if @options[:debug]
            puts "\t\t" << TestHelper.create_url(link.url, attr_c).to_s << "\n\n" if @options[:debug]
          end
        end
    }
  end

  def test_post_forms
   @parser_results[:post_forms].each {
      |form|

      # Debug output
      puts "\tTest: ".yellow.bold << form.action << "\n" if @options[:debug]

      # Iterate parameters
      for i in 0..(form.params.count - 1)
        # Get original request
        post_uri = URI(form.action)

        # Get modify request
        modify_request = TestHelper.add_symbol_to_form_request(form.params, i, "'")

        # Param array ready
        test_res = TestHelper.post_request(post_uri, modify_request[:request])

        # Test 404 error
        if test_res[:code] == 404
          puts "\t\tError: ".red.bold << "404 - not found" << "\n" if @options[:debug]
          next
        end

        # Test if error directives are ON
        if compare_results_error(test_res[:body])
          puts "\t\tParam: ".red.bold << modify_request[:name] << " - probably " << "UNSECURED".bold.red << "\n"  if @options[:debug]
          puts "\t\t" << post_uri.to_s << "(attr: " << modify_request[:request].to_s << ")\n\n" if @options[:debug]
        end
      end
    }
  end

  def test_get_forms
    # Parse get forms
    @parser_results[:get_forms].each {
      |form|

      # Debug output
      puts "\tTest: ".yellow.bold << form.action << "\n" if @options[:debug]

      # Iterate parameters
      for i in 0..(form.params.count - 1)
        # Get modify request
        modify_request = TestHelper.add_symbol_to_form_request(form.params, i, "'")

        # Param array ready
        test_res = TestHelper.get_request(TestHelper.create_url(form.action, modify_request[:request]))

        # Test 404 error
        if test_res[:code] == 404
          puts "\t\tError: ".red.bold << "404 - not found" << "\n" if @options[:debug]
          next
        end

        # Test parameters
        if options[:error_directive]
          if compare_results_error(test_res[:body])
            puts "\t\tParam: ".red.bold << modify_request[:name] << " - probably " << "UNSECURED".bold.red << "\n"  if @options[:debug]
            puts "\t\t" << TestHelper.create_url(form.action, modify_request[:request]).to_s << "\n\n" if @options[:debug]
          end
        else

        end
      end
    }
  end

  private
    # Compare results from two pages if there is error directives ON
    # @param [String] after  After change parameter
    # @return [Boolean] True or false if there is suspicion for SQLi
    def compare_results_error(after)
      return (after.include? "Warning: mysql_") ||  (after.include? "Error: mysql_") ||  (after.include? "Fatal Error: mysql_") || (after.include? "error: mysql_") || (after.include? "<b>Warning</b>:  mysql_")
    end
end