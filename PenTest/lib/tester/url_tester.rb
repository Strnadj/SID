# Class for url penetration testing
# @author Strnadj <jan.strnadek@gmail.com>

require 'net/http'
require 'open-uri'
require_relative 'support_classes/url_vector'


# Load all classes from test methods
test_method_dir = File.expand_path('../', __FILE__)
Dir["#{test_method_dir}/test_methods/*.rb"].each {|file| require file }

# Content tester
module ContentTester
  class UrlTester
    attr_accessor :parser_results, :options, :tester

    # Constructor of UrlTester class
    # @param [Hash] parser_results Parser results
    # @param [Hash] options        Options from CLI
    def initialize(parser_results, options)
      @parser_results = parser_results
      @options = options

      # Create Tester by url
      case @options[:test_method]
        when PenTest::TestMethods::ERROR_DIRECTIVES_ON
          @tester = DirectivesOn.new(@options, @parser_results)
        when PenTest::TestMethods::ERROR_DIRECTIVES_OFF
          @tester = DirectivesOff.new(@options, @parser_results)
        when PenTest::TestMethods::DROP_ALL
          @tester = DropAll.new(@options, @parser_results)
        else
          @tester = InsertInto.new(@options, @parser_results)
      end
    end

    # Method for start test
    # @return nil
    def start_test()
      print "= Start testing: =\n".bold.green unless @options[:output_text]

      # Run start testing a
      puts "Test links:".bold.red << "\n" unless @options[:output_text]
      @tester.test_links()

      # Parse post forms
      puts "Test post forms:".bold.green << "\n" unless @options[:output_text]
      @tester.test_post_forms()

      # Parse get forms
      puts "Test get forms:".bold.green << "\n" unless @options[:output_text]
      @tester.test_get_forms()

      if @options[:test_method] == PenTest::TestMethods::INSERT_INTO
        puts "Now its time to look into [sid_log] table!".red.bold
      end
    end
  end
end
