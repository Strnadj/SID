# Count URL vector differences
# @author Strnadj <jan.strnadek@gmail.com>

module ContentTester
  module URLVector
    # Method return difference between two vectors
    # @param [Hash] first_vector First vector
    # @param [Hash] second_vector Second vector
    # @return [Hash] result
    def self.difference(first_vector, second_vector)
      # Prepare out vector
      out = {}

      # Get unique keys
      keys = (second_vector.keys + first_vector.keys).uniq

      # Iterate through keys and count results
      keys.each {
        |key|
        element_count = first_vector[key].to_i - second_vector[key].to_i
        out[key] = element_count if element_count != 0
      }

      # Return new vector
      out
    end

    # Method return weight of url_vector
    # @param [Hash] url_vector URL vector
    # @return [integer] total weight
    def self.vector_weight(url_vector)
      ret = 0
      
      url_vector.each {
        |key, value|
        ret += value.to_i
      }

      ret
    end

    # Recursive element collecting
    # @param [Nokogiri::NodeSet] child Children set
    # @param [Hash] hash output hash instance
    def self.recursive_collect(child, hash)
      child.each {
        |el|
        name = el.name.to_sym
        next if name == :text
        
        if hash[name]
          hash[name] += 1
        else
          hash[name] = 1
        end

        recursive_collect(el.children, hash)
      }
    end

    # Method return URL hash vector from nokogiri instance
    # @param [Nokogiri::HTML] nokogiri_html Nokogiri instance HTML
    # @return [Hash] URL Vector
    def self.get_vector(nokogiri_html)
      output = {}
      self.recursive_collect(nokogiri_html.css('html'), output)
      output
    end
  end
end