# Pen Test - in ruby
# @author Jan Strnadek <jan.strnadek@gmail.com>

require_relative './parser/parser'
require_relative './tester/url_tester'
require_relative './helpers/string_helper'

require 'optparse'
require 'ostruct'
require 'open-uri'
require 'colored'


module PenTest
  # Constans for test methods
  module TestMethods
    # Error directives
    ERROR_DIRECTIVES_ON = 1

    # Error directives off - compare webpage content
    ERROR_DIRECTIVES_OFF = 2

    # Drop - all method
    DROP_ALL = 3

    # Insert into method
    INSERT_INTO = 4

    # Return text representation of method name
    def self.get_method_name(method)
      method_names = {
        PenTest::TestMethods::ERROR_DIRECTIVES_ON => 'PHP Error directives is ON',
        PenTest::TestMethods::ERROR_DIRECTIVES_OFF => 'Compare webpage content',
        PenTest::TestMethods::DROP_ALL => 'Add DROP ALL everywhere',
        PenTest::TestMethods::INSERT_INTO => 'Add INSERT INTO everywhere'
      }
      return method_names[method]
    end
  end

  class CLI
    # Start CLI interface, parse options etc..
    # @return [nil] Nothing
    def self.start()
    # Parse options from cmd
    options = OptParse.parse(ARGV)

    # Check options - only one from list and select default method
    options[:test_method] = PenTest::TestMethods::ERROR_DIRECTIVES_ON
    
      # Error directives = false
      unless options[:error_directive]
        options[:test_method] = PenTest::TestMethods::ERROR_DIRECTIVES_OFF
      end

      if options[:drop_all]
        if options[:test_method] != PenTest::TestMethods::ERROR_DIRECTIVES_ON
          # Try more than ONE method - error
          puts "Error:".bold.red << " please choice only one test method"
          exit(-1)
        else
          options[:test_method] = PenTest::TestMethods::DROP_ALL
        end
      end

      if options[:insert_into]
        if options[:test_method] != PenTest::TestMethods::ERROR_DIRECTIVES_ON
          # Try more than ONE method - error
          puts "Error:".bold.red << " please choice only one test method"
          exit(-1)
        else
          options[:test_method] = PenTest::TestMethods::INSERT_INTO
        end
      end

    # Show method!
    puts "Test method: ".bold.green << PenTest::TestMethods.get_method_name(options[:test_method])

    # Create parser
    parser = Parser::UrlParser.new(options)

    # Run parser
    parser.start_parsing()

    # Get result
    result = parser.get_results()

    # Options debug? results
    if options[:debug]
      puts "\n = Parser results: = ".bold.red << "\n"
      puts '   Links total: ' << result[:links].count().to_s.bold.yellow << "\n"
      puts '   Forms total: ' << (result[:post_forms].count() + result[:get_forms].count()).to_s.bold.yellow << "\n\n"
    end

    # Create tester
    url_tester = ContentTester::UrlTester.new(result, options)

    # Start parsing
    url_tester.start_test()

    # Exit
    exit 0
    end
  end

  # Option parser
  class OptParse
    def self.parse(args)
      # Options specified from cmd
      options = {}
      options[:base_url] = nil
      options[:depth_level] = 0
      options[:full_domain] = true
      options[:output_text] = nil
      options[:error_directive] = true
      options[:debug] = false
      options[:drop_all] = false
      options[:insert_into] = false

      # Base URL! - non-optional parameter!
      opts = OptionParser.new do |opts|
        opts.banner = "Welcome to SID - SQL Injection Detector script\n".red << "\tAuthor:".green << " Strnadj <jan.strnadek@gmail.com>\n\t" << "Agreement:".green << " Only for studding purposes!\n\n" << "Default test option:".green << " Error directives ON, you can change it by: " << "-e, -r, -i\n\n".red << "Usage: ./pentest [options]"

        opts.separator ''
        opts.separator 'Required options:'

        # Required argument - URL
        opts.on('-u', '--url URL', 'Required base URL') do |url|
          options[:base_url] = url
        end

        opts.separator ''
        opts.separator 'Test methods:'

        opts.on('-e', '--error-directive [BOOL]', 'Error directive E~ALL (if false - experimental behaviour) - default TRUE') do |directive|
          options[:error_directive] = directive.to_bool
        end

        opts.on('-r', '--drop-all [BOOL]', 'Drop All method - add everywhere DROP ALL TABLES; - default FALSE') do |drop|
          options[:drop_all] = drop.to_bool
        end

        opts.on('-i', '--insert-into [BOOL]', 'Insert Into method - add everywhere INSERT INTO; - default FALSE') do |insert|
          options[:insert_into] = insert.to_bool
        end

        opts.separator ''
        opts.separator 'Specific options:'

        # Depth level
        opts.on('-l', '--depth-level N', Integer, 'Depth level (default 0 - all levels)') do |level|
          options[:depth_level] = level
        end

        opts.on('-d', '--debug BOOL', 'Debug output (default FALSE)') do |debug|
          options[:debug] = debug
        end

        opts.on('-f', '--full-domain [BOOL]', 'Full domain (wildcards http://*.web.com/ - default TRUE)') do |fd|
          options[:full_domain] = fd
        end

        opts.on('-o', '--output [FILENAME]', 'File for text output (default NULL)') do |filename|
          options[:output_text] = filename
        end

        opts.separator ''
        opts.separator 'Common options:'

        opts.on_tail('-h', '--help', 'Show this help') do
          puts opts
          exit
        end

        opts.on_tail('-v', '--version', 'Show version') do
          print "SID 0.1\n"
          exit
        end
      end

      opts.parse!(args)

      # Check required argument - BASE URL
      if !options[:base_url]
        puts opts
        exit
      end

      options
    end
  end
end



