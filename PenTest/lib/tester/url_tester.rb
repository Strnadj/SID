# Class for url penetration testing
# @author Strnadj <jan.strnadek@gmail.com>

require 'net/http'
require 'open-uri'

module ContentTester
  class UrlTester
    attr_accessor :parser_results, :options

    # Constructor of UrlTester class
    # @param [Hash] parser_results Parser results
    # @param [Hash] options        Options from CLI
    def initialize(parser_results, options)
      @parser_results = parser_results
      @options = options
    end

    # Create url
    # @param [String] url URL
    # @param [Array] parameters Parameters
    # @return [URI] URI reference
    def create_url(url, parameters)
      ret = URI(url)
      ret.query = URI.encode_www_form(parameters)
      return ret
    end

    # Link testing
    # @return nil
    def test_links()
     # Parse links
        puts "Test links:".bold.red << "\n" if @options[:debug]

        @parser_results[:links].each {
            |link|
            attr = link.attr

            puts "\tTest: ".yellow.bold << link.url << "\n" if @options[:debug]

            for i in 0..(attr.count - 1)
              # Copy array
              attr_c = Marshal.load(Marshal.dump(attr))

              # Add to paramaetr test case
              attr_c[i][1] += "'"

              # Try to get page
              original = get_request(link.get_uri())
              test_res = get_request(create_url(link.url, attr_c))

              # Test 404 error
              if original[:code] == 404 || test_res[:code] == 404
                puts "\t\tError: ".red.bold << "404 - not found" << "\n" if @options[:debug]
                next
              end

              # Test parameters
              if options[:error_directive]
                if self.compare_results_error(original[:body], test_res[:body])
                  puts "\t\tParam: ".red.bold << attr_c[i][0] << " - probably " << "UNSECURED".bold.red << "\n"  if @options[:debug]
                  puts "\t\t" << create_url(link.url, attr_c).to_s << "\n\n" if @options[:debug]
                end
              else

              end
            end
      }
    end

    # Method for testing get forms
    # @return nil
    def test_get_forms()
      # Parse get forms
      puts "Test get forms:".bold.green << "\n" if @options[:debug]
      @parser_results[:get_forms].each {
        |form|

        # Debug output
        puts "\tTest: ".yellow.bold << form.action << "\n" if @options[:debug]

        # Iterate parameters
        for i in 0..(form.params.count - 1)
          # Get modify request
          modify_request = add_symbol_to_form_request(form.params, i, "'")

          # Param array ready
          original = get_request(form.get_uri())
          test_res = get_request(create_url(form.action, modify_request[:request]))

          # Test 404 error
          if original[:code] == 404 || test_res[:code] == 404
            puts "\t\tError: ".red.bold << "404 - not found" << "\n" if @options[:debug]
            next
          end

          # Test parameters
          if options[:error_directive]
            if self.compare_results_error(original[:body], test_res[:body])
              puts "\t\tParam: ".red.bold << modify_request[:name] << " - probably " << "UNSECURED".bold.red << "\n"  if @options[:debug]
              puts "\t\t" << create_url(form.action, modify_request[:request]).to_s << "\n\n" if @options[:debug]
            end
          else

          end
        end
      }
    end

    # Method add to request parameters special symbol for testing SQL injection
    # @param [Array] params Form parameters
    # @param [Integer] iteration Interations number
    # @param [String] symbol Symbol to add
    # @return [Hash] updated parameters
    def add_symbol_to_form_request(params, iteration, symbol)
      # Return test request
      ret = Hash.new

      # Return hash
      ret[:request] = Hash.new
      ret[:name] = ''

      # In i is argument for substitution
      for a in 0..(params.count - 1)
        param = params[a]

        # Checkbox?
        if param[:type] == "checkbox"
          if a == iteration
            ret[:name] = param[:name]
            ret[:request][param[:name]] = "1" + symbol
          else
            ret[:request][param[:name]] = "1"
          end
        elsif param[:type] == "select"
          if a == iteration
            ret[:name] = param[:name]
            ret[:request][param[:name]] = param[:values][0] + symbol
          else
            ret[:request][param[:name]] = param[:values][0]
          end
        else
          if a == iteration
            ret[:name] = param[:name]
            ret[:request][param[:name]] = "test" + symbol
          else
            ret[:request][param[:name]] = "test"
          end
        end
      end

      # Return test request
      ret
    end

    # Method for testing post forms
    # @return nil
    def test_post_forms()
      puts "Test post forms:".bold.green << "\n" if @options[:debug]
      @parser_results[:post_forms].each {
        |form|

        # Debug output
        puts "\tTest: ".yellow.bold << form.action << "\n" if @options[:debug]

        # Iterate parameters
        for i in 0..(form.params.count - 1)
          # Get modify request
          modify_request = add_symbol_to_form_request(form.params, i, "'")

          # Param array ready
          post_uri = URI(form.action)
          original = post_request(post_uri, form.get_attr())
          test_res = post_request(post_uri, modify_request[:request])

          # Test 404 error
          if original[:code] == 404 || test_res[:code] == 404
            puts "\t\tError: ".red.bold << "404 - not found" << "\n" if @options[:debug]
            next
          end

          # Test parameters
          if options[:error_directive]
            # Test if error directives are ON
            if self.compare_results_error(original[:body], test_res[:body])
              puts "\t\tParam: ".red.bold << modify_request[:name] << " - probably " << "UNSECURED".bold.red << "\n"  if @options[:debug]
              puts "\t\t" << post_uri.to_s << "(attr: " << modify_request[:request].to_s << ")\n\n" if @options[:debug]
            end
          else
            # Test to compare content
            
          end
        end
      }
    end

    # Method for start test
    # @return nil
    def start_test()
      print "= Start testing: =\n".bold.green if @options[:debug]

      # Run start testing a
      test_links()

      # Parse post forms
      test_post_forms()

      # Parse get forms
      test_get_forms()
    end

    # Send get request with specified parameters
    # @param [URI] uri Request url
    # @return [String] Response body
    def get_request(uri)
      ret = Hash.new
      size = 1000
      http = Net::HTTP.new(uri.host, uri.port)
      headers = {
          'Range' => "bytes=#{size}-"
      }
      path = uri.to_s.empty? ? "/" : uri.to_s

      ret[:code] = http.head(path, headers).code.to_i

      ret[:body] = Net::HTTP.get_response(uri).body

      ret
    end

    # Send post request with specified parameters
    # @param [URI] uri Request url
    # @return [String] Response body
    # @param [Hash] attr Attributes
    def post_request(uri, attr)
      ret = Hash.new
      size = 1000
      http = Net::HTTP.new(uri.host, uri.port)
      headers = {
          'Range' => "bytes=#{size}-"
      }
      path = uri.to_s.empty? ? "/" : uri.to_s

      ret[:code] = http.head(path, headers).code.to_i

      ret[:body] = Net::HTTP.post_form(uri, attr).body

      ret
    end


    # Compare results from two pages if there is error directives ON
    # @param [String] before Before change tags
    # @param [String] after  After change parameter
    # @return [Boolean] True or false if there is suspicion for SQLi
    def compare_results_error(before, after)
      return (after.include? "Warning: mysql_") ||  (after.include? "Error: mysql_") ||  (after.include? "Fatal Error: mysql_") || (after.include? "error: mysql_") || (after.include? "<b>Warning</b>:  mysql_")
    end

  end
end
