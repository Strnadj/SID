#!/opt/local/bin/php
<?php
/**
  * SQLi penetration tester
  *
  * @author Strnadj
  */

// Include DOM parser
include "simple_html_dom.php";

// Test for parametr
if (!isset($argv[1])) {
    echo "SQL Injection penetration tool".PHP_EOL;
    echo "For using this tool YOU HAVE TO config your server for displaying all errors!".PHP_EOL;
    echo "USAGE: http://URL/".PHP_EOL;
    echo "PARAMETERS: -l DEEP_LEFEL".PHP_EOL;
    echo "            -s TRUE/FALSE - subdomains".PHP_EOL;
    exit(1);
}

// ERROR HANDLER
function handleError($errno, $errstr, $errfile, $errline, array $errcontext)
{
    // error was suppressed with the @-operator
    if (0 === error_reporting()) {
        return false;
    }

    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
}
set_error_handler('handleError');


// Parse parameters
$url = $argv[1];

if ($url[strlen($url)-1] != '/') {
    $url .= '/';
}


$level = 0;
if (isset($argv[2]) && $argv[2] == '-l') {
    $level = $argv[3];
}



echo "Starting collecting URL links from page ...".PHP_EOL;
@ob_flush();

// Arrays!
$aLinks = array(); // A for links
$formGet = array(); // Form GET
$formPost = array(); // Form POST

// URL
$index = 0;
$visitedUrl = array();

// Add new url
$visitedUrl[0] = $url;

// Iterate through URL
while (isset($visitedUrl[$index])) {
    echo "==== Searching on page: ".$visitedUrl[$index]." ====".PHP_EOL;
    $html = file_get_html($visitedUrl[$index]);
    
    $pred = $visitedUrl[$index];

    if ($visitedUrl[$index][strlen($visitedUrl[$index])-1] != '/') {
        $pred .= '/';
    }

    // Iterate through a elemnts
    foreach ($html->find('a') as $a) {
        if(isset($a->href)) {
            $href = $a->href;
            // Skip # links
            if (isset($href[0]) && $href[0] == '#') {
                continue;
            }
            //echo $href.PHP_EOL;
            if (strpos($href, '#') > 0) {
                $href = substr($href, 0, strpos($href, '#'));
              //  echo $href.PHP_EOL;;
            }
            
            // Prevent to gou otside domain!
            if (substr($href, 0, 7) == 'http://') {
                if (substr($href, 0, strlen($url)) != $url) {
                    continue;
                }
            }
            
            // Replace relativ URL
            if (strpos($href, "./") === 0) {
                $href = str_replace("./", $url, $href);
            }
            if (strlen($href) < 7 || substr($href, 0, 7) != 'http://') {
                $href = $pred.$href;
            }
            $href = str_replace('//', '/', $href);
            $href = str_replace('http:/', 'http://', $href);
            // Kick out download and other pages!
            if (in_array(substr($href, -4), array('.png', '.pdf', '.jpg', '.gif', '.xls', '.docx'))) {
                continue;
            }
            //var_dump($href);
            // Get only URL, without parameters
            if (strpos($href, '?') > 0) {
                $script = substr($href, 0, strpos($href, '?'));
                // Work with URL
                $parameters = substr($href, strpos($href, '?')+1, strlen($href)-1);
                $parameters = str_replace("&amp;", "&", $parameters);
                $parameters = explode("&", $parameters);
                
                if (isset($aLinks[$script])) {
                    $data = $aLinks[$script];
                } else {
                    $data = new stdClass();
                    $data->script = $script;
                    $data->url = array();
                    $data->params = array();
                }
                $data->url [] = $href;
                
                
                $params = $data->params;
                foreach($parameters as &$param) {
                    $dataVar = explode("=", $param);
                    $name = $dataVar[0];
                    if (!isset($dataVar[1])) {
                        continue;
                    }
                    $value = $dataVar[1];
                    if (!isset($params[$name])) {
                        $params[$name] = array();
                    }
                    $params[$name][] = $value;
                }
                $data->params = $params;
                
                $aLinks[$script] = $data;
                continue;
            }
            
            if (!in_array($href, $visitedUrl)) {
                $count = count($visitedUrl);
                $visitedUrl[$count] = $href;
                //echo $href.PHP_EOL;
                @ob_flush();
            }
        }
    }
    // Check forms!
    foreach ($html->find('form') as $form) {
        $action = $form->action;
        $method = strtolower($form->method);
        $inputs = array();
        foreach($form->find('input') as $input) {
            if ($input->type != 'button' && $input->type != 'submit') {
                $inputs [$input->name] = $input->type;
            }
        }
        
        // Save
        if ($method == 'get') {
            if (!isset($formGet[$action])) {
                $data = new stdClass();
                $data->action = $action;
                $data->inputs = array();
            } else {
                $data = $formGet[$action];
            }
            
            // Compare inputs
            foreach($inputs as $name => $type) {
                if (isset($data->inputs[$name])) {
                    if(!in_array($type ,$data->inputs[$name])) {
                        $data->inputs[$name][] = $type;
                    }
                } else {
                    $data->inputs[$name] = array();
                    $data->inputs[$name][] = $type;
                }
                
            }
            
            $formGet[$action] = $data;
        } else {
            if (!isset($formPost[$action])) {
                $data = new stdClass();
                $data->action = $action;
                $data->inputs = array();
            } else {
                $data = $formPost[$action];
            }
            
            // Compare inputs
            foreach($inputs as $name => $type) {
                if (isset($data->inputs[$name])) {
                    if(!in_array($type ,$data->inputs[$name])) {
                        $data->inputs[$name][] = $type;
                    }
                } else {
                    $data->inputs[$name] = array();
                    $data->inputs[$name][] = $type;
                }
                
            }
            $formPost[$action] = $data;
        }
    }

    $index++;
}

// Show links
echo "Founded: ".count($aLinks)." links to scripts".PHP_EOL;
echo "Founded: ".count($formGet)." GET forms".PHP_EOL;
echo "Founded: ".count($formPost)." POST forms".PHP_EOL;
@ob_flush();

foreach($aLinks as $link) {
    $script = $link->script;
    $params = $link->params;
    echo "Test script: " . $script . PHP_EOL;
    echo " = Parameters:".PHP_EOL;
    foreach($params as $key => $val) {
        echo " == ".$key.PHP_EOL;
    }
    @ob_flush();
    
    // Try to replace and send request
    $pocetParametru = count($params);
    for($i = 0; $i < $pocetParametru; $i++) {
        echo " = Attempt #".($i+1).PHP_EOL;
        @ob_flush();
        $link = $script.'?';
        $a = 0;
        $param = "";
        foreach($params as $key => $val) {
            $link .= $key.'='.$val[0];
            if($a == $i) {
                $link .= '\'';
                $param = $key;
            }
            if ($a < $pocetParametru - 1) {
                $link .= '&';
            }
            $a++;
        }
        try {
            //echo $link.PHP_EOL;
            $a = file_get_contents($link);
            //echo $a.PHP_EOL;
            
            if (strpos($a, 'mysql_fetch_row() expects parameter') > 0 || strstr($a, 'mysql_fetch_array() expects parameter') > 0) {
                echo "!!!! == Probably unsecured: === !!!!".PHP_EOL;
                echo " == Param: ".$param.PHP_EOL;
                echo $link.PHP_EOL;
            } else {
                echo " === OK".PHP_EOL;
            }
        } catch(Exception $e) {
            echo " == Page probably does not exist".$e->getMessage().PHP_EOL;
        }
    }
}
?>
